version: '3'

services:
  db:
    image: postgres
    env_file:
      - ./.envs/.postgres
    volumes:
      - pgdata:/var/lib/postgresql/data

  node:
    depends_on:
      - web
    build:
      context: ./broker # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
      
  web:
    build: 
      context: ./SmartCities # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile
    command: python3.10 manage.py runserver 0.0.0.0:9000
    env_file:
      - ./.envs/.postgres
    volumes:
      - .:/SmartCities/code
    ports:
      - "9000:9000"
    depends_on:
      - db
  # front:
  #   build: 
  #     context: ./FrontEnd # The path in the machine that have the files, in this case root
  #     dockerfile: Dockerfile
  #   command: python3.10 manage.py runserver 0.0.0.0:2000
  #   volumes:
  #     - .:/FrontEnd/code
  #   ports:
  #     - "2000:2000"
  front:
    build: 
      context: ./frontreact # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile
    volumes:
      - './frontreact/src:/app/src'
      - '/app/node_modules'
    ports:
      - "3000:3000"

  redis:
    image: redis:7.0.0-alpine

  worker:
    build:
        context: ./workers
        dockerfile: Dockerfile
    command: uvicorn main:app --reload  --host 0.0.0.0
    volumes:
      - ./workers:/opt/
    env_file:
      - ./workers/.env
    depends_on:
      - redis
    expose:
      - 8000

  celery_worker:
    build:
      context: ./workers
      dockerfile: Dockerfile
    # concurrency specifies number of workers
    # purge deletes the broker queue every time it starts up
    command: celery -A main.celery_app worker -l INFO --concurrency=4 --purge
    volumes:
      - .:/code
    depends_on:
      - redis

  celery_beat:
    build:
      context: ./workers
      dockerfile: Dockerfile
    command: celery -A main.celery_app beat -l INFO
    volumes:
      - .:/code
    depends_on:
      - redis

  nginx:
    build: ./workers/nginx
    ports: 
      - 80:80
    depends_on:
      - web
  front-nginx:
    depends_on:
      - front
      - web
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "20:20"
  dbChat:
    image: postgres:13
    volumes:
      - messagingDB:/var/lib/postgresql/data
    env_file: 
      - ./.env_db
    ports:
      - "5432:5432"
  api:
    build:
      context: api
      dockerfile: Dockerfile.dev
    container_name: api
    restart: always
    volumes:
      - /usr/src/api/node_modules
      - ./api/:/usr/src/api
    ports:
      - "7777:7777"
      - "9229:9229"
    command:
      "npm run debug"
    env_file: 
      - ./.env
    environment:
      - DUMMY=0
    depends_on:
      - dbChat
      - pubsub
  pubsub:
    image: redis:latest
    ports:
      - "6379:6379"
volumes:
  messagingDB:
  pgdata: